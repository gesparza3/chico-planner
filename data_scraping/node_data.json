{"MATH120": {"desc": "This course presents the concepts and techniques associated with developing low level Embedded Systems Applications, using both Assembly Language and C. Topics include microprocessor architecture concepts, instruction set architectures, Assembly Language programming, data representations, interrupt handling and execution modes, low level C programming, and the use of on-chip and external peripherals.", "parents": [], "parent_options": [], "children": ["MATH121"], "units": "4.0"}, "CSCI311": {"desc": "This course focuses on object-oriented methodologies in designing and implementing a variety of data structures and algorithms. Coverage includes recursion, trees, search structures, hashing, heaps, sorting algorithms, and graph algorithms. Data structure and algorithm combinations will be studied and analyzed along with their relative merits using both mathematical and empirical measurements. The course includes a number of large programming assignments focusing on object-oriented software engineering and algorithm development. Students will be required to design, implement, test, and analyze their programs in at least one object-oriented language.", "parents": ["CSCI211", "CSCI217", "MATH217"], "parent_options": ["CSCI217", "MATH217"], "children": ["CSCI551", "CSCI580", "CSCI515", "CSCI490", "CSCI550", "CSCI340", "CSCI430"], "units": "4.0"}, "CSCI340": {"desc": "Operating system fundamentals, including history, process and thread management, concurrency with semaphores and monitors, deadlocks, storage management, file systems, I/O, and distributed systems.", "parents": ["EECE320", "CSCI311"], "parent_options": [], "children": [], "units": "4.0"}, "CINS220": {"desc": "Missing desc", "parents": [], "parent_options": [], "children": ["CSCI446"], "units": "Missing units"}, "CSCI430": {"desc": "An overview of software engineering principles, practice, and tools.  Topics include: agile software engineering methodologies, requirements engineering, test-driven development, software design patterns, MVC architecture, version control, software metrics, and static analysis.  Students work in groups to design and implement a semester-long open source software project.", "parents": ["CSCI311"], "parent_options": [], "children": [], "units": "3.0"}, "CSCI211": {"desc": "A second semester object-oriented programming course in computer science that emphasizes problem solving. This course continues the study of software specification, design, implementation, and debugging techniques while introducing abstract data types, fundamental data structures and associated algorithms. Coverage includes dynamic memory, file I/O, linked lists, stacks, queues, trees, recursion, and an introduction to the complexity of algorithms. Students are expected to design, implement, test, and analyze a number of programs.", "parents": ["CSCI111"], "parent_options": [], "children": ["CSCI311", "CINS370", "CSCI446"], "units": "4.0"}, "CSCI446": {"desc": "This course is an introduction to basic networking technologies and network management concepts, including major network operating systems, communication architecture focusing on ISO and Internet models with discussion of current standards and protocols.  Significant laboratory work using current networking equipment reinforces lectures and provides fundamental experience with router and switch management.", "parents": ["CINS220", "CSCI211", "EECE237"], "parent_options": ["CINS220", "EECE237"], "children": ["CINS448"], "units": "3.0"}, "CSCI111": {"desc": "A first-semester programming course, providing an overview of computer systems and an introduction to problem solving and software design using procedural object-oriented programming languages. Coverage includes the software life cycle, as well as algorithms and their role in software design. Students are expected to design, implement, and test a number of programs.", "parents": ["MATH119"], "parent_options": [], "children": ["CSCI211", "CSCI217", "MATH217", "EECE237"], "units": "4.0"}, "EECE237": {"desc": "This course presents the concepts and techniques associated with developing low level Embedded Systems Applications, using both Assembly Language and C. Topics include microprocessor architecture concepts, instruction set architectures, Assembly Language programming, data representations, interrupt handling and execution modes, low level C programming, and the use of on-chip and external peripherals.", "parents": ["CSCI111"], "parent_options": [], "children": ["EECE320", "CSCI446"], "units": "3.0"}, "CSCI490": {"desc": "This capstone course provides a culminating activity in computer science. Students will work independently to specify, design, develop, test, and document a complete software application under faculty supervision. Students present status reports at weekly meetings, and present their finished project at the end of the semester.", "parents": ["CSCI311"], "parent_options": [], "children": [], "units": "3.0"}, "MATH119": {"desc": "Missing desc", "parents": [], "parent_options": [], "children": ["CSCI111", "MATH217", "CSCI217"], "units": "Missing units"}, "MATH121": {"desc": "The definite integral and applications to area, volume, work, differential equations, etc. Sequences and series, vectors and analytic geometry in 2 and 3-space, polar coordinates, and parametric equations.", "parents": ["MATH120"], "parent_options": [], "children": ["PHYS204B", "CSCI551", "MATH314"], "units": "4.0"}, "CSCI515": {"desc": "The elements of lexical, syntactical, and semantic analysis including finite and push-down automata, top-down and bottom-up parsing, error detection and recovery, semantic actions and code generation.", "parents": ["CSCI311"], "parent_options": [], "children": [], "units": "3.0"}, "CSCI217": {"desc": "Offers an intensive introduction to discrete mathematics as used in computer science. Topics include sets, relations, propositional and predicate logic, basic proof methods including mathematical induction, digital logic circuits, complexity of algorithms, elementary combinatorics, and solving linear recurrence relations.", "parents": ["MATH119", "CSCI111"], "parent_options": [], "children": ["EECE320", "CSCI311", "CSCI550"], "units": "3.0"}, "CSCI550": {"desc": "Students design, implement, and analyze algorithms for solving problems.  Topics include dynamic programming, graphs (topological sort, strongly connected components), shortest paths (Bellman-Ford, Floyd-Warshall), minimum spanning tree (Kruskal's), flow network (max flow, min cut, maximum bipartite matching), string search (suffix tree, suffix array, Burrows-Wheeler's Transform, longest common prefix array).  In addition, basic automata computability and complexity are covered, including finite automata, regular expressions, context free grammars, Turing machines, P and NP classes, and NP complete classes and problems.  This course integrates knowledge of data structures, algorithms, and programming.", "parents": ["CSCI217", "MATH217", "CSCI311"], "parent_options": ["CSCI217", "MATH217"], "children": [], "units": "3.0"}, "MATH217": {"desc": "Offers an intensive introduction to discrete mathematics as used in computer science. Topics include sets, relations, propositional and predicate logic, basic proof methods including mathematical induction, digital logic circuits, complexity of algorithms, elementary combinatorics, and solving linear recurrence relations.", "parents": ["MATH119", "CSCI111"], "parent_options": [], "children": ["EECE320", "CSCI311", "CSCI550"], "units": "3.0"}, "CSCI551": {"desc": "Surveys numerical methods and parallel programming. Parallel architectures and algorithms for scientific programming applications, solution of simultaneous linear and non-linear equations, iterative techniques, matrix methods, and error analysis. Development of parallel algorithms, with a focus on efficient implementation and performance.", "parents": ["CSCI311", "MATH109", "MATH121"], "parent_options": ["MATH109", "MATH121"], "children": [], "units": "4.0"}, "CHEM107": {"desc": "Offers an intensive introduction to discrete mathematics as used in computer science. Topics include sets, relations, propositional and predicate logic, basic proof methods including mathematical induction, digital logic circuits, complexity of algorithms, elementary combinatorics, and solving linear recurrence relations.", "parents": [], "parent_options": [], "children": [], "units": "4.0"}, "CSCI580": {"desc": "An introduction to the basic principles, techniques, and applications of Artificial Intelligence. Coverage includes knowledge representation, logic, inference, problem solving, search algorithms, game theory, perception, learning, planning, and agent design. Students will program with AI language tools. Additional areas may include expert systems, machine learning, natural language processing, and computer vision.", "parents": ["CSCI311"], "parent_options": [], "children": [], "units": "3.0"}, "CHEM111": {"desc": "Offers an intensive introduction to discrete mathematics as used in computer science. Topics include sets, relations, propositional and predicate logic, basic proof methods including mathematical induction, digital logic circuits, complexity of algorithms, elementary combinatorics, and solving linear recurrence relations.", "parents": [], "parent_options": [], "children": ["CHEM112"], "units": "4.0"}, "EECE320": {"desc": "Study of computing architecture and how the structure of various hardware and software modules affects the ultimate performance of the total system. Topics include qualitative and quantitative analysis of bandwidths, response times, error detection and recovery, interrupts, and system throughput; distributed systems and coprocessors; vector and parallel architectures.", "parents": ["CSCI217", "MATH217", "EECE237", "EECE144"], "parent_options": ["CSCI217", "MATH217", "EECE144"], "children": ["CSCI340"], "units": "3.0"}, "CHEM108": {"desc": "Offers an intensive introduction to discrete mathematics as used in computer science. Topics include sets, relations, propositional and predicate logic, basic proof methods including mathematical induction, digital logic circuits, complexity of algorithms, elementary combinatorics, and solving linear recurrence relations.", "parents": [], "parent_options": [], "children": [], "units": "4.0"}, "MATH314": {"desc": "Basic concepts of probability and statistics with emphasis on models used in science and technology. Probability models for statistical estimation and hypothesis testing. Confidence limits. One- and two-sample inference, simple regression, one- and two-way analysis of variance. Credit cannot be received for both MATH 314 and MATH 315.", "parents": ["MATH121"], "parent_options": [], "children": [], "units": "4.0"}, "CHEM112": {"desc": "A continuation of CHEM 111. Topics include kinetics, equilibrium, acid-base chemistry, electrochemistry, chemical thermodynamics, coordination chemistry, and nuclear chemistry.  The laboratory sequence supports the above topics including both qualitative and quantitative experiments, analysis of data, and error propagation.", "parents": ["CHEM111"], "parent_options": [], "children": [], "units": "4.0"}, "MATH109": {"desc": "Missing desc", "parents": [], "parent_options": [], "children": ["CSCI551"], "units": "Missing units"}, "EECE144": {"desc": "Missing desc", "parents": [], "parent_options": [], "children": ["EECE320"], "units": "Missing units"}, "PHYS204A": {"desc": "A continuation of CHEM 111. Topics include kinetics, equilibrium, acid-base chemistry, electrochemistry, chemical thermodynamics, coordination chemistry, and nuclear chemistry.  The laboratory sequence supports the above topics including both qualitative and quantitative experiments, analysis of data, and error propagation.", "parents": [], "parent_options": [], "children": ["PHYS204B"], "units": "4.0"}, "PHYS204B": {"desc": "Charge and matter, electric field, Gauss' law, electric potential, capacitors and dielectrics, current and resistance, magnetic field, Ampere's law, Faraday's law of induction, magnetic properties of matter, electromagnetic oscillations and waves. Calculus used.", "parents": ["PHYS204A", "MATH121"], "parent_options": [], "children": [], "units": "4.0"}, "CINS370": {"desc": "This course provides an introduction to the theory and methodology for database design and implementation. Topics may include a survey/lecture component as well as a project component. The survey component covers entity- relationship modeling, relational algebra and calculus theories, data definition and data manipulation languages such as SQL, file structures, transactions, concurrency control, recovery, tuning and optimization, and object-oriented databases. The project entails requirements definition, design, and implementation of a database application.", "parents": ["CSCI211"], "parent_options": [], "children": ["CINS465"], "units": "3.0"}, "CINS448": {"desc": "This course provides a broad overview of some of the more technical aspects of Information Systems Security. The content is designed to prepare students for the Certified Information Systems Security Professional/Associate (CISSP/A) examination from the International Information Systems Security Certification Consortium (ISP2), including a discussion of each of the following topics: security management practices; access control systems; telecommunications and network security; cryptography; security architecture and models; operations security; applications and systems development; business continuity planning and disaster recovery planning; law, investigation, and ethics; and physical security.", "parents": ["CSCI446"], "parent_options": [], "children": [], "units": "3.0"}, "CINS465": {"desc": "A hands-on project course that examines languages, tools, protocols, and techniques for developing interactive and dynamic web applications.  Topics include the model-view-controller pattern, document object model, server side and client side scripting, using a server side database, and web applications security.  The course includes several web projects using a web programming framework.", "parents": ["CINS370"], "parent_options": [], "children": [], "units": "3.0"}, "CSCI301W": {"desc": "A hands-on project course that examines languages, tools, protocols, and techniques for developing interactive and dynamic web applications.  Topics include the model-view-controller pattern, document object model, server side and client side scripting, using a server side database, and web applications security.  The course includes several web projects using a web programming framework.", "parents": [], "parent_options": [], "children": [], "units": "3.0"}}